{
  "openapi": "3.0.0",
  "paths": {
    "/api/videos/search": {
      "get": {
        "operationId": "VideosController_searchVideos",
        "parameters": [
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "videos"
        ]
      }
    },
    "/api/videos": {
      "post": {
        "operationId": "VideosController_createVideo",
        "summary": "Create Video",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateVideoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The video has been successfully created."
          },
          "400": {
            "description": "Bad request."
          }
        },
        "tags": [
          "videos"
        ]
      },
      "get": {
        "operationId": "VideosController_findAllVideos",
        "summary": "Get All Videos",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all videos."
          }
        },
        "tags": [
          "videos"
        ]
      }
    },
    "/api/videos/{id}/status": {
      "get": {
        "operationId": "VideosController_getVideoStatus",
        "summary": "Get video processing status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video processing status retrieved."
          },
          "404": {
            "description": "Video not found."
          }
        },
        "tags": [
          "videos"
        ]
      }
    },
    "/api/videos/{id}": {
      "get": {
        "operationId": "VideosController_findVideo",
        "summary": "Get Video by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video has been successfully retrieved."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video not found."
          }
        },
        "tags": [
          "videos"
        ]
      },
      "patch": {
        "operationId": "VideosController_updateVideo",
        "summary": "Update video",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVideoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The video has been successfully updated."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Video not found."
          }
        },
        "tags": [
          "videos"
        ]
      },
      "delete": {
        "operationId": "VideosController_deleteVideo",
        "summary": "Delete video with content",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video has been successfully deleted."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video not found."
          }
        },
        "tags": [
          "videos"
        ]
      }
    },
    "/api/users": {
      "get": {
        "operationId": "UsersController_getUser",
        "summary": "Get the currently logged-in user's details",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/all": {
      "get": {
        "operationId": "UsersController_getAll",
        "summary": "Get all users",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "operationId": "UsersController_getUserById",
        "summary": "Get user by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The user ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "UsersController_deleteUser",
        "summary": "Delete a user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The user ID to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the user"
          },
          "400": {
            "description": "Bad Request - Invalid ID format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/{id}/video": {
      "get": {
        "operationId": "UsersController_getVideo",
        "summary": "Get videos uploaded by a user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The user ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved videos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User or videos not found"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/{id}/subscribe": {
      "post": {
        "operationId": "UsersController_subscribeToUser",
        "summary": "Subscribe to a user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The user ID to subscribe to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully subscribed to user"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/{id}/unsubscribe": {
      "post": {
        "operationId": "UsersController_unsubscribeToUser",
        "summary": "Unsubscribe from a user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The user ID to unsubscribe from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unsubscribed from user"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/videos/{videoId}/comments": {
      "post": {
        "operationId": "VideoCommentsController_createComment",
        "summary": "Create comment",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The comment has been successfully created."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Video not found."
          }
        },
        "tags": [
          "comments"
        ]
      },
      "get": {
        "operationId": "VideoCommentsController_getComments",
        "summary": "Get all video comments",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comment has been successfully updated."
          },
          "400": {
            "description": "Invalid ID format."
          }
        },
        "tags": [
          "comments"
        ]
      }
    },
    "/api/videos/{videoId}/comments/{commentId}": {
      "patch": {
        "operationId": "VideoCommentsController_updateComment",
        "summary": "Update a comment",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The comment has been successfully updated."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video or comment not found."
          }
        },
        "tags": [
          "comments"
        ]
      },
      "delete": {
        "operationId": "VideoCommentsController_deleteComment",
        "summary": "Delete a comment",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comment has been successfully deleted."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video or comment not found."
          }
        },
        "tags": [
          "comments"
        ]
      },
      "get": {
        "operationId": "VideoCommentsController_getComment",
        "summary": "Get comment by ID",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comment has been successfully retrieved."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video or comment not found."
          }
        },
        "tags": [
          "comments"
        ]
      }
    },
    "/api/videos/{videoId}/comments/{commentId}/likes": {
      "post": {
        "operationId": "LikesController_likeComment",
        "summary": "Like a comment",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "ID of the video",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "ID of the comment to like",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLikeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The comment has been successfully liked."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video or comment not found."
          }
        },
        "tags": [
          "likes"
        ]
      },
      "get": {
        "operationId": "LikesController_getCommentLikes",
        "summary": "Get likes of a comment",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "ID of the video",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "ID of the comment to get like",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved like list."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video or comment not found."
          }
        },
        "tags": [
          "likes"
        ]
      }
    },
    "/api/videos/{videoId}/comments/{commentId}/likes/{likeId}": {
      "delete": {
        "operationId": "LikesController_unlikeComment",
        "summary": "Unlike a comment",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "ID of the video",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "ID of the comment to unlike",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "likeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comment has been successfully unliked."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video or comment not found or not liked by the user."
          }
        },
        "tags": [
          "likes"
        ]
      }
    },
    "/api/videos/{videoId}/comments/{commentId}/likes/count": {
      "get": {
        "operationId": "LikesController_getCommentLikeCount",
        "summary": "Get like count for a comment",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "ID of the video",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "ID of the comment to get like count",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved like count."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video or comment not found."
          }
        },
        "tags": [
          "likes"
        ]
      }
    },
    "/api/videos/{videoId}/comments/{commentId}/likes/{userName}": {
      "get": {
        "operationId": "LikesController_getCommentLikesByUsername",
        "summary": "Get like of comment by username",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "description": "ID of the video",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "ID of the comment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userName",
            "required": true,
            "in": "path",
            "description": "Name of the user to get like",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved like."
          },
          "400": {
            "description": "Invalid ID format."
          },
          "404": {
            "description": "Video or comment not found."
          }
        },
        "tags": [
          "likes"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "summary": "Register a new user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered."
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "summary": "Login a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in."
          },
          "400": {
            "description": "Invalid credentials."
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "summary": "Refresh the access token using a refresh token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The refresh token",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access token generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token."
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "summary": "Logout the currently logged-in user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout successful. Refresh token invalidated."
          },
          "401": {
            "description": "Unauthorized - Please log in."
          }
        }
      }
    }
  },
  "info": {
    "title": "Video sharing site",
    "description": "The API description of video sharing site",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "likes",
      "description": ""
    },
    {
      "name": "comments",
      "description": ""
    },
    {
      "name": "videos",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "CreateVideoDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the video",
            "example": "My Awesome Video"
          },
          "description": {
            "type": "string",
            "description": "A description of the video content",
            "example": "This video showcases my latest project"
          }
        },
        "required": [
          "title"
        ]
      },
      "UpdateVideoDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the video",
            "example": "My Awesome Video"
          },
          "description": {
            "type": "string",
            "description": "A description of the video content",
            "example": "This video showcases my latest project"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The unique username of the user.",
            "example": "john_doe"
          },
          "email": {
            "type": "string",
            "description": "The unique email address of the user.",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "description": "The password for the user account.",
            "example": "strongPassword123"
          },
          "roles": {
            "type": "array",
            "description": "The roles assigned to the user.",
            "example": [
              "user"
            ],
            "items": {
              "type": "string",
              "enum": [
                "admin",
                "user",
                "guest"
              ]
            }
          },
          "profilePicture": {
            "type": "string",
            "description": "The profile picture URL of the user.",
            "example": "https://example.com/profile.jpg"
          },
          "refreshToken": {
            "type": "string",
            "description": "The refresh token used for generating new access tokens.",
            "example": "refreshTokenString"
          },
          "subscribers": {
            "description": "A list of users who have subscribed to this user.",
            "default": [],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "subscribed": {
            "description": "A list of users this user has subscribed to.",
            "default": [],
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "username",
          "email",
          "password",
          "roles",
          "subscribers",
          "subscribed"
        ]
      },
      "Like": {
        "type": "object",
        "properties": {
          "userId": {
            "description": "The user who liked the content.",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "userDisplayName": {
            "type": "string",
            "description": "The display name of the user who liked the content.",
            "example": "JaneDoe"
          }
        },
        "required": [
          "userId",
          "userDisplayName"
        ]
      },
      "Comment": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the comment.",
            "example": "This is a comment."
          },
          "userId": {
            "description": "The user who created the comment.",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "likes": {
            "description": "List of likes on the comment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Like"
            }
          },
          "userDisplayName": {
            "type": "string",
            "description": "The display name of the user who created the comment.",
            "example": "JohnDoe"
          }
        },
        "required": [
          "content",
          "userId",
          "likes"
        ]
      },
      "Video": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the video.",
            "example": "Sample Video Title"
          },
          "description": {
            "type": "string",
            "description": "The description of the video.",
            "example": "This is a detailed description of the video."
          },
          "url": {
            "type": "string",
            "description": "The URL where the video is hosted.",
            "example": "https://example.com/video.mp4"
          },
          "thumbnail": {
            "type": "string",
            "description": "The thumbnail image URL for the video.",
            "example": "https://example.com/video-thumbnail.jpg"
          },
          "userId": {
            "description": "The user who uploaded the video.",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "comments": {
            "description": "The list of comments on the video.",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the video.",
            "example": "pending"
          }
        },
        "required": [
          "title",
          "url",
          "thumbnail",
          "userId",
          "comments",
          "status"
        ]
      },
      "CreateCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the comment",
            "example": "This is a great video!"
          }
        },
        "required": [
          "content"
        ]
      },
      "UpdateCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The updated content of the comment",
            "example": "This is an updated comment"
          }
        }
      },
      "CreateLikeDto": {
        "type": "object",
        "properties": {
          "userDisplayName": {
            "type": "string",
            "description": "The display name of the user who is creating the like",
            "example": "John Doe"
          }
        },
        "required": [
          "userDisplayName"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the user.",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "description": "The email address of the user.",
            "example": "johndoe@example.com"
          },
          "password": {
            "type": "string",
            "description": "The password for the user account.",
            "example": "StrongPassword123!"
          },
          "roles": {
            "description": "The roles assigned to the user.",
            "example": [
              "user"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "username",
          "email",
          "password"
        ]
      },
      "LoginUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the user.",
            "example": "johndoe@example.com"
          },
          "password": {
            "type": "string",
            "description": "The password for the user account.",
            "example": "StrongPassword123!"
          }
        },
        "required": [
          "email",
          "password"
        ]
      }
    }
  }
}